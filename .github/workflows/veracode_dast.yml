name: Veracode Dynamic Analysis
on: workflow_dispatch
    
jobs:
  dynamic_analysis:
    name: Veracode Dynamic Analysis
    env:
      VERACODE_API_KEY_ID: ${{ secrets.VERACODE_API_ID }}
      VERACODE_API_KEY_SECRET: ${{ secrets.VERACODE_API_KEY }}
      JOB_NAME: ${{ github.repository }}
      JOB_ID: ${{ github.run_number }}
      Dynamic_Target: ${{ secrets.Dynamic_Target }}
      Dynamic_User: ${{ secrets.Dynamic_User }}
      Dynamic_Pass: ${{ secrets.Dynamic_Pass }}
      Dynamic_Owner: ${{ secrets.Dynamic_Owner }}
      Dynamic_Email: ${{ secrets.Dynamic_Email }}
    runs-on: ubuntu-latest

    
    steps:
      - run: echo "ðŸ”Ž The name of your branch is ${{ github.ref }} and your repository is ${{ github.repository }}."
      - name: Check out repository code
        uses: actions/checkout@v3
      - run: echo "ðŸ’¡ The ${{ github.repository }} repository has been cloned to the runner."
      - name: Initiate Veracode Dynamic Analysis
        run: |
          echo "Running silent...  Installing Required Dependencies"
          pip install -r vera-scripts/requirements.txt -q
          echo "Completed Installing Required Dependencies"
          python vera-scripts/create-da-scan.py

  get-policy-flaws:
    runs-on: ubuntu-latest
    container:
      image: veracode/api-signing:latest
    steps:
      # Note: this will only work up to about 500 flaws
      #		due to Veracode results limiting
      # See the get_flaws.sh script in the helpers directory
      #		for a more elaborate method
      - name: get policy flaws
        run: |
          cd /tmp
          export VERACODE_API_KEY_ID=${{ secrets.VERACODE_API_ID }}
          export VERACODE_API_KEY_SECRET=${{ secrets.VERACODE_API_KEY }}
          guid=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v1/applications?name=DVWA%202.0" | jq -r '._embedded.applications[0].guid') 
          echo GUID: ${guid}
          total_flaws=$(http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=DYNAMIC&violates_policy=True" | jq -r '.page.total_elements')
          echo TOTAL_FLAWS: ${total_flaws}
          http --auth-type veracode_hmac GET "https://api.veracode.com/appsec/v2/applications/${guid}/findings?scan_type=DYNAMIC&violates_policy=True&size=${total_flaws}" > policy_flaws.json

      - name: save results file
        uses: actions/upload-artifact@v3
        with:
          name: policy-flaws
          path: /tmp/policy_flaws.json

  # This step will import flaws from the step above
  import-policy-flaws:
    needs: get-policy-flaws
    runs-on: ubuntu-latest
    steps:
      - name: get flaw file
        uses: actions/download-artifact@v3
        with:
          name: policy-flaws
          path: /tmp

      - name: import flaws as issues
        uses: veracode/veracode-flaws-to-issues@v2.1.19
        with:
          scan-results-json: '/tmp/policy_flaws.json'
